generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String             @id @default(cuid())
  email                   String             @unique
  name                    String
  password                String
  avatar                  String? // URL do avatar do usuário
  role                    Role               @default(STUDENT)
  isActive                Boolean            @default(true)
  paymentCustomerId       String? // ID do cliente no gateway (genérico)
  paymentAccountId        String? // ID da conta de recebimento (genérico)
  // Dados para recebimento de pagamentos (modelo simplificado)
  pixKey                  String? // Chave PIX para receber pagamentos
  bankData                Json? // Dados bancários completos (banco, agência, conta, tipo)
  payoutPreference        PayoutMethod?      @default(PIX) // PIX, BANK_TRANSFER
  // Dados fiscais/pessoais
  documentType            String? // CPF ou CNPJ
  documentNumber          String? // Número do documento
  fullName                String? // Nome completo (pode ser diferente do nome de usuário)
  // Status de verificação
  isVerified              Boolean            @default(false) // Se os dados foram verificados
  verifiedAt              DateTime?
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  courses                 Course[]           @relation("InstructorCourses")
  enrollments             Enrollment[]
  comments                LessonComment[]
  payments                Payment[]
  reviews                 Review[]
  couponsUsed             CouponUsage[]
  couponsCreated          Coupon[]           @relation("CouponCreator")
  settingsUpdated         PlatformSetting[]
  refundRequests          RefundRequest[]
  refundsProcessed        RefundRequest[]    @relation("RefundProcessor")
  // Novas relações para sistema de saldo
  instructorBalance       InstructorBalance? @relation("InstructorBalance")
  payoutRequestsProcessed PayoutRequest[]    @relation("PayoutProcessor")
  savedCards              SavedCard[]
  // Novas relações para o sistema de lições
  lessonProgress          LessonProgress[]
  quizAttempts            QuizAttempt[]

  @@map("users")
}

model SavedCard {
  id                   String   @id @default(cuid())
  userId               String
  cardHolderName       String
  cardNumberLast4      String // Últimos 4 dígitos do cartão
  cardBrand            String // visa, mastercard, etc
  expirationMonth      String
  expirationYear       String
  identificationType   String // CPF ou CNPJ
  identificationNumber String
  isDefault            Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("saved_cards")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courses     Course[]

  @@map("categories")
}

model Course {
  id              String           @id @default(cuid())
  title           String
  description     String?
  imageUrl        String?
  price           Float            @default(0) // Pode ser 0 para cursos gratuitos
  isPublished     Boolean          @default(false)
  instructorId    String
  categoryId      String?
  paymentType     PaymentType      @default(ONE_TIME)
  stripeProductId String?          @unique
  stripePriceId   String?          @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  category        Category?        @relation(fields: [categoryId], references: [id])
  instructor      User             @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  enrollments     Enrollment[]
  lessons         Lesson[]
  modules         Module[]
  payments        Payment[]
  reviews         Review[]
  coupons         Coupon[]
  // Novas relações para o sistema de lições
  lessonProgress  LessonProgress[]
  quizAttempts    QuizAttempt[]

  @@index([instructorId])
  @@index([categoryId])
  @@index([isPublished])
  @@map("courses")
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int      @default(0)
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lessons     Lesson[]
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([order])
  @@map("modules")
}

model Lesson {
  id                 String           @id @default(cuid())
  title              String
  content            String? // Para lições de texto (markdown)
  videoUrl           String? // Para lições de vídeo
  videoDuration      Int? // Duração em segundos
  duration           Int? // Duração estimada da lição
  order              Int              @default(0)
  moduleId           String?
  isCompleted        Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  courseId           String
  description        String?
  isLocked           Boolean          @default(false)
  isPreview          Boolean          @default(false)
  type               LessonType       @default(VIDEO)
  // Campos específicos para quiz
  quizPassingScore   Int? // Porcentagem mínima para passar (0-100)
  quizAttempts       Int              @default(0) // Número de tentativas permitidas (0 = ilimitado)
  allowReview        Boolean          @default(true) // Permitir revisar após concluir
  // Relações
  comments           LessonComment[]
  course             Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module             Module?          @relation(fields: [moduleId], references: [id])
  questions          Question[] // Perguntas do quiz
  lessonProgress     LessonProgress[] // Progresso dos estudantes nesta lição
  quizAttemptRecords QuizAttempt[] // Tentativas de quiz dos estudantes

  @@index([moduleId])
  @@index([courseId])
  @@index([order])
  @@map("lessons")
}

// Nova tabela para perguntas de múltipla escolha
model Question {
  id          String           @id @default(cuid())
  lessonId    String
  question    String // Texto da pergunta
  explanation String? // Explicação da resposta (opcional)
  order       Int              @default(0)
  points      Int              @default(1) // Pontos que vale a questão
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now())
  lesson      Lesson           @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  options     QuestionOption[]
  answers     QuizAnswer[]

  @@index([lessonId])
  @@map("questions")
}

// Opções de resposta para cada pergunta
model QuestionOption {
  id              String       @id @default(cuid())
  questionId      String
  text            String // Texto da opção
  isCorrect       Boolean      @default(false)
  order           Int          @default(0)
  createdAt       DateTime     @default(now())
  question        Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedAnswers QuizAnswer[]

  @@index([questionId])
  @@map("question_options")
}

// Registro de progresso por lição por usuário
model LessonProgress {
  id           String    @id @default(cuid())
  userId       String
  lessonId     String
  courseId     String
  isCompleted  Boolean   @default(false)
  watchTime    Int       @default(0) // Tempo assistido em segundos (para vídeos)
  completedAt  DateTime?
  lastAccessed DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson       Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  course       Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId, courseId])
  @@map("lesson_progress")
}

// Tentativas de quiz
model QuizAttempt {
  id             String       @id @default(cuid())
  userId         String
  lessonId       String
  courseId       String
  score          Float // Pontuação obtida (0-100)
  totalQuestions Int // Total de questões
  correctAnswers Int // Respostas corretas
  isPassing      Boolean // Se passou ou não
  completedAt    DateTime     @default(now())
  timeSpent      Int // Tempo gasto em segundos
  lesson         Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  answers        QuizAnswer[]

  @@index([userId, lessonId])
  @@index([userId, courseId])
  @@map("quiz_attempts")
}

// Respostas específicas do usuário para cada pergunta
model QuizAnswer {
  id               String          @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String? // Opção selecionada pelo usuário
  isCorrect        Boolean
  timeSpent        Int             @default(0) // Tempo gasto nesta questão
  createdAt        DateTime        @default(now())
  attempt          QuizAttempt     @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   QuestionOption? @relation(fields: [selectedOptionId], references: [id])

  @@unique([attemptId, questionId])
  @@map("quiz_answers")
}

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())
  completedAt DateTime?
  progress    Float     @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("enrollments")
}

model LessonComment {
  id        String          @id @default(cuid())
  content   String
  userId    String
  lessonId  String
  parentId  String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  lesson    Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  parent    LessonComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   LessonComment[] @relation("CommentReplies")
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([lessonId])
  @@index([parentId])
  @@map("lesson_comments")
}

model Payment {
  id                  String               @id @default(cuid())
  userId              String
  courseId            String
  externalPaymentId   String?              @unique // ID do pagamento no gateway (genérico)
  externalOrderId     String?              @unique // ID da ordem no gateway (genérico)
  paymentData         String? // JSON com dados específicos do gateway (QR code, etc.)
  paymentMethod       String?              @default("PIX") // PIX, CREDIT_CARD, DEBIT_CARD, BOLETO
  platformFeeAmount   Float? // Taxa da plataforma em valor absoluto
  instructorAmount    Float? // Valor que o instrutor vai receber
  amount              Float
  currency            String               @default("BRL")
  status              PaymentStatus        @default(PENDING)
  paymentType         PaymentType
  gatewayProvider     String?              @default("MERCADOPAGO") // MERCADOPAGO, STRIPE, PAGSEGURO, etc.
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  course              Course               @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription        Subscription?
  couponUsages        CouponUsage[]
  refundRequests      RefundRequest[]
  balanceTransactions BalanceTransaction[]

  @@index([userId])
  @@index([courseId])
  @@index([status])
  @@index([externalPaymentId])
  @@index([externalOrderId])
  @@index([gatewayProvider])
  @@map("payments")
}

model Subscription {
  id                   String             @id @default(cuid())
  paymentId            String             @unique
  stripeSubscriptionId String             @unique
  stripeCustomerId     String
  status               SubscriptionStatus @default(ACTIVE)
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  cancelledAt          DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  payment              Payment            @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@index([stripeSubscriptionId])
  @@index([stripeCustomerId])
  @@index([status])
  @@map("subscriptions")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@index([rating])
  @@map("reviews")
}

model Coupon {
  id            String        @id @default(cuid())
  code          String        @unique
  description   String?
  discountType  DiscountType  @default(PERCENTAGE)
  discountValue Float
  maxUses       Int?
  usedCount     Int           @default(0)
  validFrom     DateTime      @default(now())
  validUntil    DateTime?
  isActive      Boolean       @default(true)
  courseId      String?
  createdById   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  course        Course?       @relation(fields: [courseId], references: [id], onDelete: SetNull)
  createdBy     User          @relation("CouponCreator", fields: [createdById], references: [id], onDelete: Cascade)
  usages        CouponUsage[]

  @@index([code])
  @@index([isActive])
  @@index([courseId])
  @@index([createdById])
  @@map("coupons")
}

model CouponUsage {
  id             String   @id @default(cuid())
  couponId       String
  userId         String
  paymentId      String
  discountAmount Float
  usedAt         DateTime @default(now())
  coupon         Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment        Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@unique([couponId, userId])
  @@index([couponId])
  @@index([userId])
  @@index([paymentId])
  @@map("coupon_usages")
}

model PlatformSetting {
  id          String      @id @default(cuid())
  key         String      @unique
  value       String
  type        SettingType @default(STRING)
  description String?
  updatedBy   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  updater     User        @relation(fields: [updatedBy], references: [id], onDelete: Cascade)

  @@index([key])
  @@map("platform_settings")
}

model RefundRequest {
  id             String       @id @default(cuid())
  paymentId      String
  userId         String
  reason         String?
  amount         Float
  status         RefundStatus @default(PENDING)
  stripeRefundId String?
  processedAt    DateTime?
  processedBy    String?
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  payment        Payment      @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  processor      User?        @relation("RefundProcessor", fields: [processedBy], references: [id], onDelete: SetNull)

  @@index([paymentId])
  @@index([userId])
  @@index([status])
  @@map("refund_requests")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email, code])
  @@index([expiresAt])
  @@map("password_resets")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum PaymentType {
  ONE_TIME
  SUBSCRIPTION
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
  INCOMPLETE
}

enum LessonType {
  VIDEO
  TEXT
  QUIZ
}

enum DiscountType {
  PERCENTAGE
  FLAT_RATE
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
}

enum RefundStatus {
  PENDING
  PROCESSED
  FAILED
  CANCELLED
  APPROVED
  REJECTED
}

// Sistema de saldo interno dos instrutores
model InstructorBalance {
  id               String               @id @default(cuid())
  instructorId     String               @unique
  availableBalance Float                @default(0)
  pendingBalance   Float                @default(0)
  totalEarnings    Float                @default(0)
  totalWithdrawn   Float                @default(0)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  instructor       User                 @relation("InstructorBalance", fields: [instructorId], references: [id], onDelete: Cascade)
  transactions     BalanceTransaction[]
  payoutRequests   PayoutRequest[]

  @@index([instructorId])
  @@map("instructor_balances")
}

model PayoutRequest {
  id                String              @id @default(cuid())
  instructorId      String
  amount            Float
  status            PayoutStatus        @default(PENDING)
  bankAccountType   String? // 'PIX', 'CONTA_CORRENTE', 'POUPANCA'
  bankDetails       Json // Dados bancários (PIX, banco, agência, conta)
  requestedAt       DateTime            @default(now())
  processedAt       DateTime?
  processedBy       String?
  notes             String?
  rejectionReason   String?
  requestMonth      Int // Mês do saque (1-12)
  requestYear       Int // Ano do saque
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  instructorBalance InstructorBalance   @relation(fields: [instructorId], references: [instructorId], onDelete: Cascade)
  processor         User?               @relation("PayoutProcessor", fields: [processedBy], references: [id], onDelete: SetNull)
  transaction       BalanceTransaction?

  @@unique([instructorId, requestMonth, requestYear], name: "unique_monthly_payout")
  @@index([instructorId])
  @@index([status])
  @@map("payout_requests")
}

model BalanceTransaction {
  id                String                 @id @default(cuid())
  instructorId      String
  type              BalanceTransactionType
  amount            Float
  description       String
  paymentId         String?
  payoutRequestId   String?                @unique
  createdAt         DateTime               @default(now())
  instructorBalance InstructorBalance      @relation(fields: [instructorId], references: [instructorId], onDelete: Cascade)
  payment           Payment?               @relation(fields: [paymentId], references: [id], onDelete: SetNull)
  payoutRequest     PayoutRequest?         @relation(fields: [payoutRequestId], references: [id], onDelete: SetNull)

  @@index([instructorId])
  @@index([type])
  @@index([paymentId])
  @@map("balance_transactions")
}

enum PayoutStatus {
  PENDING
  APPROVED
  PROCESSING
  COMPLETED
  REJECTED
  FAILED
}

enum BalanceTransactionType {
  CREDIT // Ganho de venda
  DEBIT // Saque processado
  REFUND // Estorno
  FEE // Taxa da plataforma
}

enum PayoutMethod {
  PIX
  BANK_TRANSFER
  PAYPAL // Para futuro
}
