generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  name             String
  password         String
  role             Role              @default(STUDENT)
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  courses          Course[]          @relation("InstructorCourses")
  enrollments      Enrollment[]
  comments         LessonComment[]
  payments         Payment[]
  reviews          Review[]
  couponsUsed      CouponUsage[]
  couponsCreated   Coupon[]          @relation("CouponCreator")
  settingsUpdated  PlatformSetting[]
  refundRequests   RefundRequest[]
  refundsProcessed RefundRequest[]   @relation("RefundProcessor")

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courses     Course[]

  @@map("categories")
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String?
  imageUrl        String?
  price           Float        @default(0)
  isPublished     Boolean      @default(false)
  instructorId    String
  categoryId      String?
  paymentType     PaymentType  @default(ONE_TIME)
  stripeProductId String?      @unique
  stripePriceId   String?      @unique
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  category        Category?    @relation(fields: [categoryId], references: [id])
  instructor      User         @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  enrollments     Enrollment[]
  lessons         Lesson[]
  modules         Module[]
  payments        Payment[]
  reviews         Review[]
  coupons         Coupon[]

  @@index([instructorId])
  @@index([categoryId])
  @@index([isPublished])
  @@map("courses")
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int      @default(0)
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lessons     Lesson[]
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([order])
  @@map("modules")
}

model Lesson {
  id          String          @id @default(cuid())
  title       String
  content     String
  videoUrl    String?
  duration    Int?
  order       Int             @default(0)
  moduleId    String?
  isCompleted Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  courseId    String
  description String?
  isLocked    Boolean         @default(false)
  isPreview   Boolean         @default(false)
  type        LessonType      @default(VIDEO)
  comments    LessonComment[]
  course      Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module      Module?         @relation(fields: [moduleId], references: [id])

  @@index([moduleId])
  @@index([courseId])
  @@index([order])
  @@map("lessons")
}

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())
  completedAt DateTime?
  progress    Float     @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("enrollments")
}

model LessonComment {
  id        String          @id @default(cuid())
  content   String
  userId    String
  lessonId  String
  parentId  String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  lesson    Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  parent    LessonComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   LessonComment[] @relation("CommentReplies")
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([lessonId])
  @@index([parentId])
  @@map("lesson_comments")
}

model Payment {
  id              String          @id @default(cuid())
  userId          String
  courseId        String
  stripePaymentId String          @unique
  amount          Float
  currency        String          @default("usd")
  status          PaymentStatus   @default(PENDING)
  paymentType     PaymentType
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  course          Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription    Subscription?
  couponUsages    CouponUsage[]
  refundRequests  RefundRequest[]

  @@index([userId])
  @@index([courseId])
  @@index([status])
  @@index([stripePaymentId])
  @@map("payments")
}

model Subscription {
  id                   String             @id @default(cuid())
  paymentId            String             @unique
  stripeSubscriptionId String             @unique
  stripeCustomerId     String
  status               SubscriptionStatus @default(ACTIVE)
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  cancelledAt          DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  payment              Payment            @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@index([stripeSubscriptionId])
  @@index([stripeCustomerId])
  @@index([status])
  @@map("subscriptions")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@index([rating])
  @@map("reviews")
}

model Coupon {
  id            String        @id @default(cuid())
  code          String        @unique
  description   String?
  discountType  DiscountType  @default(PERCENTAGE)
  discountValue Float
  maxUses       Int?
  usedCount     Int           @default(0)
  validFrom     DateTime      @default(now())
  validUntil    DateTime?
  isActive      Boolean       @default(true)
  courseId      String?
  createdById   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  course        Course?       @relation(fields: [courseId], references: [id], onDelete: SetNull)
  createdBy     User          @relation("CouponCreator", fields: [createdById], references: [id], onDelete: Cascade)
  usages        CouponUsage[]

  @@index([code])
  @@index([isActive])
  @@index([courseId])
  @@index([createdById])
  @@map("coupons")
}

model CouponUsage {
  id             String   @id @default(cuid())
  couponId       String
  userId         String
  paymentId      String
  discountAmount Float
  usedAt         DateTime @default(now())
  coupon         Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment        Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@unique([couponId, userId])
  @@index([couponId])
  @@index([userId])
  @@index([paymentId])
  @@map("coupon_usages")
}

model PlatformSetting {
  id          String      @id @default(cuid())
  key         String      @unique
  value       String
  type        SettingType @default(STRING)
  description String?
  updatedBy   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  updater     User        @relation(fields: [updatedBy], references: [id], onDelete: Cascade)

  @@index([key])
  @@map("platform_settings")
}

model RefundRequest {
  id             String       @id @default(cuid())
  paymentId      String
  userId         String
  reason         String?
  amount         Float
  status         RefundStatus @default(PENDING)
  stripeRefundId String?
  processedAt    DateTime?
  processedBy    String?
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  payment        Payment      @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  processor      User?        @relation("RefundProcessor", fields: [processedBy], references: [id], onDelete: SetNull)

  @@index([paymentId])
  @@index([userId])
  @@index([status])
  @@map("refund_requests")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum PaymentType {
  ONE_TIME
  SUBSCRIPTION
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
  INCOMPLETE
}

enum LessonType {
  VIDEO
  TEXT
  QUIZ
  ASSIGNMENT
}

enum DiscountType {
  PERCENTAGE
  FLAT_RATE
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
}

enum RefundStatus {
  PENDING
  PROCESSED
  FAILED
  CANCELLED
  APPROVED
  REJECTED
}
