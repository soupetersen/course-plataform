import { EmailService } from '../services/EmailService';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

async function testEmailService() {
  console.log('üß™ Testando EmailService...\n');

  // Verificar configura√ß√£o
  if (!process.env.RESEND_API_KEY) {
    console.error('‚ùå RESEND_API_KEY n√£o configurada!');
    console.log('üí° Configure a vari√°vel RESEND_API_KEY no arquivo .env');
    return;
  }

  if (!process.env.DEFAULT_FROM_EMAIL) {
    console.warn('‚ö†Ô∏è DEFAULT_FROM_EMAIL n√£o configurada, usando padr√£o');
  }

  const emailService = new EmailService();
  const testEmail = process.env.TEST_EMAIL || 'test@example.com';

  console.log(`üìß Enviando emails de teste para: ${testEmail}\n`);

  // Teste 1: Email de pagamento aprovado
  console.log('1Ô∏è‚É£ Testando email de pagamento aprovado...');
  try {
    const result1 = await emailService.sendPaymentApprovedEmail(testEmail, {
      userName: 'Jo√£o Silva (Teste)',
      courseName: 'Curso de Teste - JavaScript',
      amount: 99.90,
      currency: 'BRL',
      paymentDate: new Date(),
    });
    
    if (result1.success) {
      console.log('‚úÖ Pagamento aprovado enviado com sucesso!');
      console.log(`   Message ID: ${result1.messageId}`);
    } else {
      console.log('‚ùå Erro ao enviar pagamento aprovado:', result1.error);
    }
  } catch (error) {
    console.log('‚ùå Erro no teste de pagamento aprovado:', error);
  }

  console.log('');

  // Teste 2: Email de matr√≠cula
  console.log('2Ô∏è‚É£ Testando email de matr√≠cula confirmada...');
  try {
    const result2 = await emailService.sendEnrollmentConfirmationEmail(testEmail, {
      userName: 'Jo√£o Silva (Teste)',
      courseName: 'Curso de Teste - JavaScript',
      courseDescription: 'Um curso completo de JavaScript para iniciantes',
      instructorName: 'Maria Santos',
      enrollmentDate: new Date(),
    });
    
    if (result2.success) {
      console.log('‚úÖ Matr√≠cula confirmada enviada com sucesso!');
      console.log(`   Message ID: ${result2.messageId}`);
    } else {
      console.log('‚ùå Erro ao enviar matr√≠cula confirmada:', result2.error);
    }
  } catch (error) {
    console.log('‚ùå Erro no teste de matr√≠cula:', error);
  }

  console.log('');

  // Teste 3: Email PIX
  console.log('3Ô∏è‚É£ Testando email de instru√ß√µes PIX...');
  try {
    const result3 = await emailService.sendPixPaymentInstructionsEmail(testEmail, {
      userName: 'Jo√£o Silva (Teste)',
      courseName: 'Curso de Teste - JavaScript',
      amount: 99.90,
      currency: 'BRL',
      pixCode: '00020126580014br.gov.bcb.pix013662c47a4c-teste-mock-pix-code5204000053039865802BR5925COURSE PLATFORM TESTE6009SAO PAULO62070503***6304ABCD',
      expirationDate: new Date(Date.now() + 24 * 60 * 60 * 1000),
    });
    
    if (result3.success) {
      console.log('‚úÖ Instru√ß√µes PIX enviadas com sucesso!');
      console.log(`   Message ID: ${result3.messageId}`);
    } else {
      console.log('‚ùå Erro ao enviar instru√ß√µes PIX:', result3.error);
    }
  } catch (error) {
    console.log('‚ùå Erro no teste PIX:', error);
  }

  console.log('');

  // Teste 4: Email de conclus√£o
  console.log('4Ô∏è‚É£ Testando email de conclus√£o de curso...');
  try {
    const result4 = await emailService.sendCourseCompletionEmail(testEmail, {
      userName: 'Jo√£o Silva (Teste)',
      courseName: 'Curso de Teste - JavaScript',
      completionDate: new Date(),
    });
    
    if (result4.success) {
      console.log('‚úÖ Conclus√£o de curso enviada com sucesso!');
      console.log(`   Message ID: ${result4.messageId}`);
    } else {
      console.log('‚ùå Erro ao enviar conclus√£o:', result4.error);
    }
  } catch (error) {
    console.log('‚ùå Erro no teste de conclus√£o:', error);
  }

  console.log('');

  // Teste 5: Email de reset de senha
  console.log('5Ô∏è‚É£ Testando email de reset de senha...');
  try {
    const result5 = await emailService.sendPasswordResetEmail(testEmail, {
      userName: 'Jo√£o Silva (Teste)',
      resetUrl: 'https://example.com/reset-password?token=test-token-123',
      expirationTime: new Date(Date.now() + 60 * 60 * 1000),
    });
    
    if (result5.success) {
      console.log('‚úÖ Reset de senha enviado com sucesso!');
      console.log(`   Message ID: ${result5.messageId}`);
    } else {
      console.log('‚ùå Erro ao enviar reset:', result5.error);
    }
  } catch (error) {
    console.log('‚ùå Erro no teste de reset:', error);
  }

  console.log('\nüéâ Testes conclu√≠dos!');
  console.log('üí° Verifique sua caixa de entrada (e spam) para ver os emails de teste.');
}

// Executar testes
if (require.main === module) {
  testEmailService().catch(console.error);
}

export { testEmailService };
